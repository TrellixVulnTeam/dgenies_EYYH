#!/usr/bin/env python3

import os
import argparse
import webbrowser
import threading
from glob import glob
import time
from dgenies.lib.crons import Crons
from dgenies.config_reader import AppConfigReader
from dgenies.bin.clean_jobs import parse_database, parse_upload_folders
from dgenies.database import Job, Session, DoesNotExist

runned = False


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def parse_args():
    parser = argparse.ArgumentParser(description="Manage dgenies application")
    subparsers = parser.add_subparsers(dest="subparser_name")

    # Run the app:
    run = subparsers.add_parser("run", help="Run the application")
    run.add_argument("-m", "--mode", type=str, choices=["standalone", "webserver"], default="standalone",
                            help="Mode into run the application")
    run.add_argument("-d", "--debug", help="Run in debug mode", type=bool, const=True, nargs="?", required=False,
                     default=False)
    run.add_argument("-o", "--host", help="Host into run the application", type=str, required=False,
                     default="127.0.0.1")
    run.add_argument("-p", "--port", help="Port into run the application", type=int, required=False, default=5000)
    run.add_argument("--no-crons", help="Do not run crons (for debug only, ignored for standalone mode)", type=bool,
                     const=True, nargs="?", required=False, default=False)
    run.add_argument("--no-browser", type=bool, const=True, nargs="?", required=False, default=False,
                     help="Do not start the browser (Start of browser is always disabled in debug mode)")

    # Clear data or jobs:
    clear = subparsers.add_parser("clear", help="Clear data")
    clear.add_argument("-c", "--crons", help="Clear crons", type=bool, const=True, nargs="?", required=False,
                       default=False)
    clear.add_argument("-l", "--logs", help="Clear logs", action="store_true")
    clear.add_argument("-j", "--jobs", help="Clear jobs", action="store_true")
    clear.add_argument("-s", "--sessions", help="Clear sessions", action="store_true")
    clear.add_argument("-m", "--max-age", help="Max age for job to delete (0 for all)", type=int, required=False,
                       default=0)

    # Remove a job:
    rm = subparsers.add_parser("rm", help="Remove a job")
    rm.add_argument("-j", "--job", help="Remove a job", action="store_true")
    rm.add_argument("-s", "--session", help="Remove a session", action="store_true")
    rm.add_argument("id", metavar="ID", type=str, help="Id to remove")

    args = parser.parse_args()

    if args.subparser_name == "run":
        return "run", [args.mode, args.debug, args.host, args.port, args.no_crons, args.no_browser]
    if args.subparser_name == "clear":
        if not args.crons and not args.logs and not args.jobs and not args.sessions:
            print("Nothing to do.")
            return "clear", None
        return "clear", args
    if args.subparser_name == "rm":
        if not args.job and not args.session:
            print("Error: please add -j OR -s argument")
            return "rm", None
        elif args.job and args.session:
            print("Error: -j and -s options are mutually exclusive")
            return "rm", None
        return "rm", args


def start_browser(host, port):
    print("Starting browser...")
    webbrowser.open("http://{0}:{1}".format(host, port))


def run(mode="standalone", debug=False, host="127.0.0.1", port=5000, no_crons=False, no_browser=False):
    os.environ['DISABLE_CRONS'] = "True" if no_crons else "False"
    if not debug and not no_browser:
        thread = threading.Timer(2, start_browser, kwargs={
            "host": host,
            "port": port
        })
        thread.start()
    if debug:
        os.environ['LOGS'] = "True"
    from dgenies import launch
    app = launch()
    app.run(host=host, port=port, debug=debug)


def clear_crons():
    crons = Crons(None, True)
    crons.clear()


def clear_logs():
    config = AppConfigReader()

    if hasattr(config, "log_dir"):
        log_files = glob(os.path.join(config.log_dir, "*.log"))
        for file in log_files:
            os.remove(file)

    else:
        print("No log dir defined!")


def clear_jobs(max_data_age=7):
    config_reader = AppConfigReader()

    upload_folder = config_reader.upload_folder
    app_data = config_reader.app_data
    now = time.time()

    max_age = {
        "uploads": 0,
        "error": 0,
        "data": max_data_age,
        "fasta_sorted": 0
    }

    print("#########################")
    print("# Parsing Upload folder #")
    print("#########################")
    print("")
    parse_upload_folders(
        upload_folder=upload_folder,
        now=now,
        max_age=max_age
    )
    print("")

    print("######################")
    print("# Parsing Jobs in DB #")
    print("######################")
    print("")
    parse_database(
        app_data=app_data,
        max_age=max_age
    )
    print("")


def clear_sessions():
    sessions = Session.all()
    for session in sessions:
        session.remove()


def remove_job(id_job):
    """
    Remove a job
    :param id_job: id of the job
    """
    if Job.exists(id_job):
        job = Job(id_job)
        job.remove()
        print("Job \"%s\" removed" % id_job)
    else:
        print(bcolors.FAIL + ("Job \"%s\" does not exists" % id_job) + bcolors.ENDC)


def remove_session(s_id):
    """
    Remove a session
    :param s_id: id of the session
    :return:
    """
    try:
        Session(s_id).remove()
        print("Session \"%s\" removed" % s_id)
    except DoesNotExist:
        print(bcolors.FAIL + ("Session \"%s\" does not exists" % s_id) + bcolors.ENDC)


if __name__ == "__main__":
    command, args = parse_args()
    if command == "run":
        run(*args)
    elif command == "clear" and args is not None:
        if args.crons:
            print("Cleaning crons...")
            clear_crons()
        if args.logs:
            print("Cleaning logs...")
            clear_logs()
        if args.jobs:
            print("Cleaning jobs...")
            clear_jobs(args.max_age)
        if args.sessions:
            print("Cleaning sessions...")
            clear_sessions()

    elif command == "rm" and args is not None:
        if args.job:
            remove_job(args.id)
        elif args.session:
            remove_session(args.id)
